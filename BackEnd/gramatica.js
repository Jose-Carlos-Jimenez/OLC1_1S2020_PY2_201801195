/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,11],$V2=[1,12],$V3=[28,29,33],$V4=[1,14],$V5=[5,29,33],$V6=[2,18],$V7=[1,28],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,27],$Ve=[14,18,19,20,21,22,36,50],$Vf=[2,17],$Vg=[1,47],$Vh=[29,45],$Vi=[2,39],$Vj=[1,49],$Vk=[29,42,45],$Vl=[45,48],$Vm=[2,45],$Vn=[1,70],$Vo=[1,71],$Vp=[1,72],$Vq=[1,73],$Vr=[1,74],$Vs=[1,75],$Vt=[1,77],$Vu=[1,69],$Vv=[1,63],$Vw=[1,64],$Vx=[1,79],$Vy=[1,82],$Vz=[1,68],$VA=[1,84],$VB=[1,89],$VC=[29,42,45,48,81],$VD=[29,42,45,48,81,135],$VE=[1,93],$VF=[29,42,45,48,81,133,135],$VG=[1,94],$VH=[1,95],$VI=[29,42,45,48,81,130,131,133,135],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[29,42,45,48,81,125,126,127,128,130,131,133,135],$VO=[1,100],$VP=[1,101],$VQ=[29,42,45,48,69,81,104,125,126,127,128,130,131,133,135],$VR=[1,102],$VS=[1,103],$VT=[1,104],$VU=[1,105],$VV=[29,31,42,45,48,69,81,104,120,121,122,125,126,127,128,130,131,133,135],$VW=[14,29,30,31,42,45,48,69,81,104,120,121,122,125,126,127,128,130,131,133,135],$VX=[2,9],$VY=[1,110],$VZ=[14,30],$V_=[2,138],$V$=[1,139],$V01=[1,144],$V11=[1,145],$V21=[1,168],$V31=[1,172],$V41=[1,173],$V51=[1,169],$V61=[1,175],$V71=[1,170],$V81=[1,176],$V91=[1,171],$Va1=[1,177],$Vb1=[1,178],$Vc1=[1,179],$Vd1=[1,186],$Ve1=[1,189],$Vf1=[7,8,9,10,11,12,14,18,19,20,21,22,34,36,46,65,67,86,90,96,97,98,99,100,106,107,108,110,112],$Vg1=[2,80],$Vh1=[1,199],$Vi1=[1,208],$Vj1=[14,29,30],$Vk1=[1,213],$Vl1=[29,31,42,45,48,69,81,104,115,120,121,122,125,126,127,128,130,131,133,135],$Vm1=[7,8,9,10,11,12,14,18,19,20,21,22,34,36,46,50,65,67,86,87,90,96,97,98,99,100,106,107,108,110,112],$Vn1=[1,228],$Vo1=[7,8,9,10,11,12,14,18,19,20,21,22,34,36,46,65,67,86,90,98,99,100,106,107,108,110,112],$Vp1=[1,264],$Vq1=[1,265],$Vr1=[1,269],$Vs1=[7,8,9,10,11,12,14,18,19,20,21,22,34,36,46,65,67,86,87,90,96,97,98,99,100,106,107,108,110,112];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"goal":3,"compilationunit":4,"EOF":5,"literal":6,"LITERAL_INT":7,"LITERAL_DOUBLE":8,"LITERAL_TRUE":9,"LITERAL_FALSE":10,"LITERAL_CHAR":11,"LITERAL_STRING":12,"methodinvocation":13,"IDENTIFICADOR":14,"type":15,"primitivetype":16,"classorinterfacetype":17,"INT":18,"CHAR":19,"STRING":20,"BOOLEAN":21,"DOUBLE":22,"name":23,"importdeclarations":24,"typedeclarations":25,"importdeclaration":26,"typedeclaration":27,"IMPORT":28,"PUNTO_COMA":29,"PUNTO":30,"MULTIPLICACION":31,"classdeclaration":32,"CLASS":33,"LLAVE_APERTURA":34,"classbodydeclarations":35,"LLAVE_CIERRE":36,"classbodydeclaration":37,"fielddeclaration":38,"methoddeclaration":39,"constructordeclaration":40,"variabledeclarators":41,"IGUAL":42,"expression":43,"variabledeclarator":44,"COMA":45,"PAR_APERTURA":46,"formalparameterlist":47,"PAR_CIERRE":48,"methodbody":49,"VOID":50,"formalparameter":51,"block":52,"constructorbody":53,"blockstatements":54,"blockstatement":55,"localvariabledeclaration":56,"statement":57,"statementwithouttrailingsubstatement":58,"labeledstatement":59,"ifthenstatement":60,"ifthenelsestatement":61,"whilestatement":62,"forstatement":63,"printstatement":64,"IMPRIMIR":65,"expressionlistprint":66,"IMPRIMIR_L":67,"expressionlist":68,"SUMA":69,"statementnoshortif":70,"labeledstatementnoshortif":71,"ifthenelsestatementnoshortif":72,"whilestatementnoshortif":73,"forstatementnoshortif":74,"expressionstatement":75,"switchstatement":76,"dostatement":77,"breakstatement":78,"continuestatement":79,"returnstatement":80,"DOS_PUNTOS":81,"statementexpression":82,"postincrementexpression":83,"postdecrementexpression":84,"classinstancecreationexpression":85,"IF":86,"ELSE":87,"elseifblocks":88,"elseifblock":89,"SWITCH":90,"switchblock":91,"switchblockstatementgroups":92,"switchlabels":93,"switchblockstatementgroup":94,"switchlabel":95,"CASE":96,"DEFAULT":97,"WHILE":98,"DO":99,"FOR":100,"forinit":101,"forupdate":102,"assignmentexpression":103,"RESTA":104,"statementexpressionlist":105,"BREAK":106,"CONTINUE":107,"RETURN":108,"primary":109,"THIS":110,"fieldaccess":111,"NEW":112,"argumentlist":113,"postfixexpression":114,"DECREMENTO":115,"unaryexpression":116,"unaryexpressionnotplusminus":117,"NOT":118,"multiplicativeexpression":119,"DIVISION":120,"MODULO":121,"POTENCIA":122,"additiveexpression":123,"relationalexpression":124,"MENOR_QUE":125,"MAYOR_QUE":126,"MENOR_IGUAL":127,"MAYOR_IGUAL":128,"equalityexpression":129,"IGUALDAD":130,"DISTINTO":131,"conditionalandexpression":132,"AND":133,"conditionalorexpression":134,"OR":135,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"LITERAL_INT",8:"LITERAL_DOUBLE",9:"LITERAL_TRUE",10:"LITERAL_FALSE",11:"LITERAL_CHAR",12:"LITERAL_STRING",14:"IDENTIFICADOR",18:"INT",19:"CHAR",20:"STRING",21:"BOOLEAN",22:"DOUBLE",28:"IMPORT",29:"PUNTO_COMA",30:"PUNTO",31:"MULTIPLICACION",33:"CLASS",34:"LLAVE_APERTURA",36:"LLAVE_CIERRE",42:"IGUAL",45:"COMA",46:"PAR_APERTURA",48:"PAR_CIERRE",50:"VOID",65:"IMPRIMIR",67:"IMPRIMIR_L",68:"expressionlist",69:"SUMA",81:"DOS_PUNTOS",86:"IF",87:"ELSE",90:"SWITCH",96:"CASE",97:"DEFAULT",98:"WHILE",99:"DO",100:"FOR",104:"RESTA",106:"BREAK",107:"CONTINUE",108:"RETURN",110:"THIS",112:"NEW",115:"DECREMENTO",118:"NOT",120:"DIVISION",121:"MODULO",122:"POTENCIA",125:"MENOR_QUE",126:"MAYOR_QUE",127:"MENOR_IGUAL",128:"MAYOR_IGUAL",130:"IGUALDAD",131:"DISTINTO",133:"AND",135:"OR"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[15,1],[15,1],[16,1],[16,1],[16,1],[16,1],[16,1],[17,1],[23,1],[4,2],[24,1],[24,2],[25,1],[25,2],[26,3],[26,5],[27,1],[27,1],[32,5],[35,1],[35,2],[37,1],[37,1],[37,1],[37,0],[38,3],[38,5],[41,1],[41,3],[44,1],[44,3],[39,6],[39,6],[47,1],[47,3],[47,0],[51,2],[49,1],[49,1],[40,5],[53,3],[53,2],[52,3],[52,2],[54,1],[54,2],[55,1],[55,1],[55,0],[56,3],[56,2],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[64,5],[64,5],[64,4],[66,3],[66,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,2],[70,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[59,3],[71,3],[75,2],[82,1],[82,1],[82,1],[82,1],[60,5],[61,7],[72,6],[88,2],[88,1],[89,6],[89,2],[89,0],[76,5],[91,4],[92,1],[92,2],[92,0],[94,2],[93,1],[93,2],[93,0],[95,3],[95,2],[62,5],[73,5],[77,7],[63,9],[74,9],[101,3],[101,2],[102,3],[102,3],[105,1],[105,3],[78,2],[79,2],[80,3],[80,2],[109,1],[109,1],[109,3],[109,1],[109,1],[109,1],[85,5],[113,1],[113,3],[113,0],[111,3],[13,4],[13,6],[114,4],[83,3],[84,2],[116,2],[116,2],[116,1],[116,1],[117,1],[117,2],[117,3],[119,1],[119,3],[119,3],[119,3],[119,3],[123,1],[123,3],[123,3],[124,1],[124,3],[124,3],[124,3],[124,3],[129,1],[129,3],[129,3],[132,1],[132,3],[134,1],[134,3],[103,1],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,24:3,26:4,28:$V0},{1:[3]},{5:[1,6]},{25:7,26:8,27:9,28:$V0,29:$V1,32:10,33:$V2},o($V3,[2,20]),{14:$V4,23:13},{1:[2,1]},{5:[2,19],27:15,29:$V1,32:10,33:$V2},o($V3,[2,21]),o($V5,[2,22]),o($V5,[2,26]),o($V5,[2,27]),{14:[1,16]},{29:[1,17],30:[1,18]},o([7,8,9,10,11,12,14,29,30,42,46,110,112],$V6),o($V5,[2,23]),{34:[1,19]},o($V3,[2,24]),{31:[1,20]},{14:$V7,15:26,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,35:21,36:[2,34],37:22,38:23,39:24,40:25,50:$Vd},{29:[1,37]},{14:$V7,15:26,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,36:[1,38],37:39,38:23,39:24,40:25,50:$Vd},o($Ve,[2,29]),o($Ve,[2,31]),o($Ve,[2,32]),o($Ve,[2,33]),{14:[1,41],41:40,44:42},{14:[1,43]},{14:$V6,46:[1,44]},{14:[2,10]},{14:[2,11]},{14:[2,12]},{14:[2,13]},{14:[2,14]},{14:[2,15]},{14:[2,16]},{14:$Vf},o($V3,[2,25]),o($V5,[2,28]),o($Ve,[2,30]),{29:[1,45],42:[1,46],45:$Vg},o($Vh,$Vi,{42:$Vj,46:[1,48]}),o($Vk,[2,37]),{46:[1,50]},o($Vl,$Vm,{16:29,17:30,23:36,47:51,51:52,15:53,14:$V4,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc}),o($Ve,[2,35]),{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:54,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},{14:$VA,44:83},o($Vl,$Vm,{16:29,17:30,23:36,51:52,15:53,47:85,14:$V4,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc}),{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:86,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},o($Vl,$Vm,{16:29,17:30,23:36,51:52,15:53,47:87,14:$V4,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc}),{45:$VB,48:[1,88]},o($Vl,[2,43]),{14:[1,90]},{29:[1,91]},o($VC,[2,173]),o($VC,[2,172],{135:[1,92]}),o($VD,[2,170],{133:$VE}),o($VF,[2,168],{130:$VG,131:$VH}),o($VI,[2,165],{125:$VJ,126:$VK,127:$VL,128:$VM}),o($VN,[2,160],{69:$VO,104:$VP}),o($VQ,[2,157],{31:$VR,120:$VS,121:$VT,122:$VU}),o($VV,[2,152]),{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:106,117:65,118:$Vz},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:107,117:65,118:$Vz},o($VV,[2,147]),o($VW,[2,148]),o($VV,[2,149]),{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:108,117:65,118:$Vz},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:109,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},o($VW,[2,2]),o($VW,[2,3]),o($VW,[2,4]),o($VW,[2,5]),o($VW,[2,6]),o($VW,[2,7]),o($VW,[2,8]),o($VW,$VX,{46:$VY}),{14:$V4,23:111,30:[1,112]},o($VZ,[2,130]),o($VZ,[2,132]),o($VZ,[2,133]),{14:[1,113]},o($Vk,[2,38]),o($Vh,$Vi,{42:$Vj}),{45:$VB,48:[1,114]},o($Vk,[2,40]),{45:$VB,48:[1,115]},{34:[1,117],53:116},{14:$V4,15:53,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,51:118},o($Vl,[2,46]),o($Ve,[2,36]),{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:119},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:120},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:121},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:122},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:123},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:124},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:125},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:126},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:127},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:128},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:129,117:65,118:$Vz},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:130,117:65,118:$Vz},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:131,117:65,118:$Vz},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:132,117:65,118:$Vz},o($VV,[2,145]),o($VV,[2,146]),o($VV,[2,150]),{48:[1,133]},o($Vl,$V_,{103:55,134:56,132:57,129:58,124:59,123:60,119:61,116:62,117:65,6:66,114:67,13:76,109:78,85:80,111:81,113:134,43:135,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,14:$Vt,46:$Vu,69:$Vv,104:$Vw,110:$Vx,112:$Vy,118:$Vz}),{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$V$,83:136,85:80,109:78,110:$Vx,111:81,112:$Vy,114:137},{14:[1,140]},{46:[1,141]},{29:$V01,34:$V11,49:142,52:143},{29:$V01,34:$V11,49:146,52:143},o($Ve,[2,49]),{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$V21,15:152,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$V11,36:[1,148],41:153,44:42,46:$V$,52:161,54:147,55:149,56:150,57:151,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},o($Vl,[2,44]),o($VD,[2,171],{133:$VE}),o($VF,[2,169],{130:$VG,131:$VH}),o($VI,[2,166],{125:$VJ,126:$VK,127:$VL,128:$VM}),o($VI,[2,167],{125:$VJ,126:$VK,127:$VL,128:$VM}),o($VN,[2,161],{69:$VO,104:$VP}),o($VN,[2,162],{69:$VO,104:$VP}),o($VN,[2,163],{69:$VO,104:$VP}),o($VN,[2,164],{69:$VO,104:$VP}),o($VQ,[2,158],{31:$VR,120:$VS,121:$VT,122:$VU}),o($VQ,[2,159],{31:$VR,120:$VS,121:$VT,122:$VU}),o($VV,[2,153]),o($VV,[2,154]),o($VV,[2,155]),o($VV,[2,156]),o($VW,[2,151]),{45:$Vd1,48:[1,185]},o($Vl,[2,136]),{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$V$,84:187,85:80,109:78,110:$Vx,111:81,112:$Vy,114:188},{69:$Ve1},o($VZ,[2,129]),{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:190,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},o($VZ,[2,139],{46:[1,191]}),o($Vl,$V_,{103:55,134:56,132:57,129:58,124:59,123:60,119:61,116:62,117:65,6:66,114:67,13:76,109:78,85:80,111:81,43:135,113:192,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,14:$Vt,46:$Vu,69:$Vv,104:$Vw,110:$Vx,112:$Vy,118:$Vz}),o($Ve,[2,41]),o($Ve,[2,47]),o($Ve,[2,48]),{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$V21,15:152,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$V11,36:[1,194],41:153,44:42,46:$V$,52:161,54:193,55:149,56:150,57:151,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},o($Ve,[2,42]),{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$V21,15:152,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$V11,36:[1,195],41:153,44:42,46:$V$,52:161,55:196,56:150,57:151,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},o($Ve,[2,51]),o($Vf1,[2,54]),o($Vf1,[2,56]),o($Vf1,[2,57]),{14:$VA,41:197,44:42},{29:[1,198],45:$Vg},o($Vf1,[2,61]),o($Vf1,[2,62]),o($Vf1,[2,63]),o($Vf1,[2,64]),o($Vf1,[2,65]),o($Vf1,[2,66]),o($Vf1,[2,67]),o($Vf1,$Vg1),o($Vf1,[2,81]),o($Vf1,[2,82]),o($Vf1,[2,83]),o($Vf1,[2,84]),o($Vf1,[2,85]),o($Vf1,[2,86]),o([14,29,30,45],$Vi,{42:$Vj,46:$VY,81:$Vh1}),{46:[1,200]},{46:[1,201]},{46:[1,202]},{46:[1,203]},{46:[1,204]},{29:[1,205]},{46:[1,206]},{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$Vi1,34:$V11,46:$V$,52:161,57:207,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},{29:[1,209]},{29:[1,210]},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,29:[1,212],43:211,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},{29:[2,91]},{29:[2,92]},o($Vj1,[2,93]),o($Vj1,[2,94]),{69:$Ve1,115:$Vk1},o($VW,[2,140]),{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:214,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},o($Vl1,[2,142]),{115:$Vk1},{69:[1,215]},{48:[1,216]},o($Vl,$V_,{103:55,134:56,132:57,129:58,124:59,123:60,119:61,116:62,117:65,6:66,114:67,13:76,109:78,85:80,111:81,43:135,113:217,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,14:$Vt,46:$Vu,69:$Vv,104:$Vw,110:$Vx,112:$Vy,118:$Vz}),{45:$Vd1,48:[1,218]},{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$V21,15:152,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$V11,36:[1,219],41:153,44:42,46:$V$,52:161,55:196,56:150,57:151,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},o($Vm1,[2,53]),o($Ve,[2,50]),o($Vf1,[2,55]),{29:[1,220],45:$Vg},o($Vf1,[2,60]),{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$Vi1,34:$V11,46:$V$,52:161,57:221,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:222,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:223,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},{14:$V4,15:226,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:225,101:224},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:229,46:$Vu,66:227,68:$Vn1,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:229,46:$Vu,48:[1,231],66:230,68:$Vn1,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},o($Vf1,[2,90]),{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:232,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},{98:[1,233]},o($VZ,$VX,{46:$VY,81:$Vh1}),o($Vf1,[2,125]),o($Vf1,[2,126]),{29:[1,234]},o($Vf1,[2,128]),o($Vl1,[2,144]),o($Vl,[2,137]),o([7,8,9,10,11,12,14,29,46,110,112],[2,143]),o($VZ,[2,131]),{45:$Vd1,48:[1,235]},o($Vj1,[2,135]),o($Vm1,[2,52]),o($Vf1,[2,59]),o($Vf1,[2,88]),{48:[1,236]},{48:[1,237]},{29:[1,238]},{14:$Vf,42:[1,239]},{14:$VA,41:240,44:42},{48:[1,241]},{69:[1,242]},{48:[2,72]},{48:[1,243]},{29:[1,244]},{48:[1,245]},{46:[1,246]},o($Vf1,[2,127]),o($VW,[2,141]),{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$Vi1,34:$V11,46:$V$,52:248,57:247,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$Vi1,34:$V11,46:$V$,52:161,57:249,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:250,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,69:$Vv,85:80,103:251,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},{29:[2,120],45:$Vg},{29:[1,252]},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:253,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},{29:[1,254]},o($Vf1,[2,70]),{34:[1,256],91:255},{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:257,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},o($Vf1,[2,95]),o($Vf1,$Vg1,{87:[1,258]}),o($Vf1,[2,114]),{29:[1,259]},{29:[2,119]},o($Vf1,[2,68]),{48:[2,71]},o($Vf1,[2,69]),o($Vf1,[2,103]),o($Vo1,[2,107],{92:260,94:261,93:262,95:263,96:$Vp1,97:$Vq1}),{48:[1,266]},o($Vf1,[2,102],{88:267,89:268,87:$Vr1}),{14:[1,271],102:270},o($Vo1,[2,111],{95:263,93:272,94:273,96:$Vp1,97:$Vq1}),o($Vf1,[2,105]),{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$V21,15:152,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$V11,36:[2,58],41:153,44:42,46:$V$,52:161,54:274,55:149,56:150,57:151,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,95:275,96:$Vp1,97:$Vq1,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},o($Vf1,[2,109]),{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:276,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},{81:[1,277]},{29:[1,278]},o($Vf1,[2,96],{89:279,87:$Vr1}),o($Vs1,[2,99]),{34:$V11,52:281,86:[1,280]},{48:[1,282]},{69:[1,283],104:[1,284]},{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$V21,15:152,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$V11,36:[1,285],41:153,44:42,46:$V$,52:161,54:274,55:149,56:150,57:151,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,95:275,96:$Vp1,97:$Vq1,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},o($Vf1,[2,106]),o([36,96,97],[2,108],{16:29,17:30,23:36,44:42,109:78,111:81,6:138,56:150,57:151,15:152,41:153,58:154,59:155,60:156,61:157,62:158,63:159,64:160,52:161,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,13:182,85:183,114:184,55:196,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,14:$V21,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,34:$V11,46:$V$,65:$V31,67:$V41,86:$V51,90:$V61,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,110:$Vx,112:$Vy}),o($Vf1,[2,110]),{81:[1,286]},o($Vf1,[2,113]),o($Vf1,[2,116]),o($Vs1,[2,98]),{46:[1,287]},o($Vs1,[2,101]),{6:138,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:182,14:$Vi1,34:$V11,46:$V$,52:161,57:288,58:154,59:155,60:156,61:157,62:158,63:159,64:160,65:$V31,67:$V41,75:162,76:163,77:164,78:165,79:166,80:167,82:174,83:180,84:181,85:183,86:$V51,90:$V61,98:$V71,99:$V81,100:$V91,106:$Va1,107:$Vb1,108:$Vc1,109:78,110:$Vx,111:81,112:$Vy,114:184},{69:[1,289]},{104:[1,290]},o($Vf1,[2,104]),o($Vf1,[2,112]),{6:66,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:291,46:$Vu,69:$Vv,85:80,103:55,104:$Vw,109:78,110:$Vx,111:81,112:$Vy,114:67,116:62,117:65,118:$Vz,119:61,123:60,124:59,129:58,132:57,134:56},o($Vf1,[2,117]),{48:[2,121]},{48:[2,122]},{48:[1,292]},{34:$V11,52:293},o($Vs1,[2,100])],
defaultActions: {6:[2,1],29:[2,10],30:[2,11],31:[2,12],32:[2,13],33:[2,14],34:[2,15],35:[2,16],36:[2,17],180:[2,91],181:[2,92],229:[2,72],251:[2,119],253:[2,71],289:[2,121],290:[2,122]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 104;
case 4:return 115;
case 5:return 131;
case 6:return 118;
case 7: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 12; 
case 8:return 121;
case 9:return 133;
case 10:return 46;
case 11:return 'MENOS_UNARIO';
case 12:return 8;
case 13:return 7;
case 14:return 11;
case 15:return 67;
case 16:return 65;
case 17:return 48;
case 18:return 31;
case 19:return 30;
case 20:return 45;
case 21:return 120;
case 22:return 81;
case 23:return 29;
case 24:return 'COMILLA_DOBLE';
case 25:return 'BARRA_INVERTIDA';
case 26:return 'SALTO_LINEA';
case 27:return 'RETORNO_CARROS';
case 28:return 'TABULACION';
case 29:return 122;
case 30:return 34;
case 31:return 135;
case 32:return 36;
case 33:return 69;
case 34:return 127;
case 35:return 130;
case 36:return 128;
case 37:return 126;
case 38:return 125;
case 39:return 42
case 40:return 21;
case 41:return 106;
case 42:return 96;
case 43:return 19;
case 44:return 33;
case 45:return 107;
case 46:return 97;
case 47:return 99;
case 48:return 22;
case 49:return 87;
case 50:return 10;
case 51:return 100;
case 52:return 86;
case 53:return 28;
case 54:return 18;
case 55:return 112;
case 56:return 108;
case 57:return 20;
case 58:return 90;
case 59:return 110;
case 60:return 9;
case 61:return 50;
case 62:return 98;
case 63:return 14;
case 64:return 5;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:-)/,/^(?:--)/,/^(?:!=)/,/^(?:!)/,/^(?:"[^\"]*")/,/^(?:%)/,/^(?:&&)/,/^(?:\()/,/^(?:\(\*-1\))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:'([^\\]|\\.?)')/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:\))/,/^(?:\*)/,/^(?:\.)/,/^(?:,)/,/^(?:\/)/,/^(?::)/,/^(?:;)/,/^(?:")/,/^(?:\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:\^)/,/^(?:\{)/,/^(?:\|\|)/,/^(?:\})/,/^(?:\+)/,/^(?:<=)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:boolean\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:import\b)/,/^(?:int\b)/,/^(?:new\b)/,/^(?:return\b)/,/^(?:String\b)/,/^(?:switch\b)/,/^(?:this\b)/,/^(?:true\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:([a-zA-Z]|_)[a-zA-Z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}