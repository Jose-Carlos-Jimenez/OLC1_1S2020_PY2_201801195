/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,11],$V2=[1,12],$V3=[27,28,32],$V4=[1,14],$V5=[5,28,32],$V6=[1,19],$V7=[2,17],$V8=[2,18],$V9=[1,29],$Va=[1,32],$Vb=[1,33],$Vc=[1,34],$Vd=[1,35],$Ve=[1,36],$Vf=[1,28],$Vg=[13,17,18,19,20,21,35,49],$Vh=[1,47],$Vi=[28,42],$Vj=[2,39],$Vk=[1,49],$Vl=[42,47],$Vm=[2,44],$Vn=[1,55],$Vo=[1,72],$Vp=[1,73],$Vq=[1,74],$Vr=[1,75],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,81],$Vw=[1,80],$Vx=[1,85],$Vy=[1,66],$Vz=[1,67],$VA=[1,71],$VB=[1,89],$VC=[28,42,47,74],$VD=[28,42,47,74,128],$VE=[1,93],$VF=[28,42,47,74,126,128],$VG=[1,94],$VH=[1,95],$VI=[28,42,47,74,123,124,126,128],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[28,42,47,74,118,119,120,121,123,124,126,128],$VO=[1,100],$VP=[1,101],$VQ=[28,42,47,74,106,109,118,119,120,121,123,124,126,128],$VR=[1,102],$VS=[1,103],$VT=[1,104],$VU=[1,105],$VV=[28,30,42,47,74,106,109,113,114,115,118,119,120,121,123,124,126,128],$VW=[13,28,29,30,42,47,74,106,109,113,114,115,118,119,120,121,123,124,126,128],$VX=[2,8],$VY=[13,29],$VZ=[1,113],$V_=[1,120],$V$=[1,121],$V01=[2,119],$V11=[1,166],$V21=[1,170],$V31=[1,167],$V41=[1,172],$V51=[1,168],$V61=[1,173],$V71=[1,169],$V81=[1,174],$V91=[1,175],$Va1=[1,176],$Vb1=[1,186],$Vc1=[1,190],$Vd1=[7,8,9,10,11,12,13,17,18,19,20,21,33,35,42,45,80,82,91,92,93,97,98,99,101,103],$Ve1=[2,57],$Vf1=[7,8,9,10,11,12,13,17,18,19,20,21,33,35,42,45,80,81,82,91,92,93,97,98,99,101,103],$Vg1=[13,29,45],$Vh1=[28,42,47],$Vi1=[13,28,29,42,47],$Vj1=[1,205],$Vk1=[7,8,9,10,11,12,13,17,18,19,20,21,33,35,42,45,49,80,81,82,91,92,93,97,98,99,101,103],$Vl1=[28,30,42,47,74,106,107,109,113,114,115,118,119,120,121,123,124,126,128],$Vm1=[1,226],$Vn1=[1,237],$Vo1=[1,238],$Vp1=[1,239],$Vq1=[1,240],$Vr1=[1,264],$Vs1=[1,265],$Vt1=[35,89,90];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"goal":3,"compilationunit":4,"EOF":5,"literal":6,"LITERAL_INT":7,"LITERAL_DOUBLE":8,"LITERAL_TRUE":9,"LITERAL_FALSE":10,"LITERAL_CHAR":11,"LITERAL_STRING":12,"IDENTIFICADOR":13,"type":14,"primitivetype":15,"classorinterfacetype":16,"INT":17,"CHAR":18,"STRING":19,"BOOLEAN":20,"DOUBLE":21,"name":22,"importdeclarations":23,"typedeclarations":24,"importdeclaration":25,"typedeclaration":26,"IMPORT":27,"PUNTO_COMA":28,"PUNTO":29,"MULTIPLICACION":30,"classdeclaration":31,"CLASS":32,"LLAVE_APERTURA":33,"classbodydeclarations":34,"LLAVE_CIERRE":35,"classbodydeclaration":36,"fielddeclaration":37,"methoddeclaration":38,"constructordeclaration":39,"variabledeclarators":40,"variabledeclarator":41,"COMA":42,"IGUAL":43,"expression":44,"PAR_APERTURA":45,"formalparameterlist":46,"PAR_CIERRE":47,"methodbody":48,"VOID":49,"formalparameter":50,"block":51,"constructorbody":52,"blockstatements":53,"blockstatement":54,"statement":55,"statementwithouttrailingsubstatement":56,"labeledstatement":57,"ifthenstatement":58,"ifthenelsestatement":59,"whilestatement":60,"forstatement":61,"statementnoshortif":62,"labeledstatementnoshortif":63,"ifthenelsestatementnoshortif":64,"whilestatementnoshortif":65,"forstatementnoshortif":66,"emptystatement":67,"expressionstatement":68,"switchstatement":69,"dostatement":70,"breakstatement":71,"continuestatement":72,"returnstatement":73,"DOS_PUNTOS":74,"statementexpression":75,"postincrementexpression":76,"postdecrementexpression":77,"methodinvocation":78,"classinstancecreationexpression":79,"IF":80,"ELSE":81,"SWITCH":82,"switchblock":83,"switchstatementgroups":84,"switchlabels":85,"switchblockstatementgroups":86,"switchblockstatementgroup":87,"switchlabel":88,"CASE":89,"DEFAULT":90,"WHILE":91,"DO":92,"FOR":93,"forinit":94,"forupdate":95,"statementexpressionlist":96,"BREAK":97,"CONTINUE":98,"RETURN":99,"primary":100,"THIS":101,"fieldaccess":102,"NEW":103,"argumentlist":104,"postfixexpression":105,"SUMA":106,"DECREMENTO":107,"unaryexpression":108,"RESTA":109,"unaryexpressionnotplusminus":110,"NOT":111,"multiplicativeexpression":112,"DIVISION":113,"MODULO":114,"POTENCIA":115,"additiveexpression":116,"relationalexpression":117,"MENOR_QUE":118,"MAYOR_QUE":119,"MENOR_IGUAL":120,"MAYOR_IGUAL":121,"equalityexpression":122,"IGUALDAD":123,"DISTINTO":124,"conditionalandexpression":125,"AND":126,"conditionalorexpression":127,"OR":128,"assignmentexpression":129,"lefthandside":130,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"LITERAL_INT",8:"LITERAL_DOUBLE",9:"LITERAL_TRUE",10:"LITERAL_FALSE",11:"LITERAL_CHAR",12:"LITERAL_STRING",13:"IDENTIFICADOR",17:"INT",18:"CHAR",19:"STRING",20:"BOOLEAN",21:"DOUBLE",27:"IMPORT",28:"PUNTO_COMA",29:"PUNTO",30:"MULTIPLICACION",32:"CLASS",33:"LLAVE_APERTURA",35:"LLAVE_CIERRE",42:"COMA",43:"IGUAL",45:"PAR_APERTURA",47:"PAR_CIERRE",49:"VOID",74:"DOS_PUNTOS",80:"IF",81:"ELSE",82:"SWITCH",84:"switchstatementgroups",89:"CASE",90:"DEFAULT",91:"WHILE",92:"DO",93:"FOR",97:"BREAK",98:"CONTINUE",99:"RETURN",101:"THIS",103:"NEW",106:"SUMA",107:"DECREMENTO",109:"RESTA",111:"NOT",113:"DIVISION",114:"MODULO",115:"POTENCIA",118:"MENOR_QUE",119:"MAYOR_QUE",120:"MENOR_IGUAL",121:"MAYOR_IGUAL",123:"IGUALDAD",124:"DISTINTO",126:"AND",128:"OR"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[14,1],[14,1],[15,1],[15,1],[15,1],[15,1],[15,1],[16,1],[22,1],[22,2],[4,2],[23,1],[23,2],[24,1],[24,2],[25,3],[25,5],[26,1],[26,1],[31,5],[34,1],[34,2],[36,1],[36,1],[36,1],[36,0],[37,3],[40,1],[40,3],[41,3],[41,1],[38,6],[38,6],[46,1],[46,3],[46,0],[50,2],[48,1],[48,1],[39,5],[52,3],[52,2],[51,3],[51,2],[53,1],[53,2],[54,3],[54,1],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[62,1],[62,1],[62,1],[62,1],[62,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[67,1],[57,3],[63,3],[68,2],[75,1],[75,1],[75,1],[75,1],[58,5],[59,7],[64,7],[69,5],[83,4],[86,1],[86,2],[87,2],[85,1],[85,2],[88,3],[88,2],[60,5],[65,5],[70,7],[61,9],[66,9],[94,1],[94,2],[95,1],[96,1],[96,3],[71,2],[72,2],[73,3],[73,2],[100,1],[100,1],[100,3],[100,1],[100,1],[100,1],[79,5],[104,1],[104,3],[104,0],[102,3],[78,4],[78,6],[105,4],[76,3],[77,2],[108,2],[108,2],[108,1],[108,1],[110,1],[110,2],[112,1],[112,3],[112,3],[112,3],[112,3],[116,1],[116,3],[116,3],[117,1],[117,3],[117,3],[117,3],[117,3],[122,1],[122,3],[122,3],[125,1],[125,3],[127,1],[127,3],[129,1],[130,1],[130,1],[44,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,23:3,25:4,27:$V0},{1:[3]},{5:[1,6]},{24:7,25:8,26:9,27:$V0,28:$V1,31:10,32:$V2},o($V3,[2,20]),{13:$V4,22:13},{1:[2,1]},{5:[2,19],26:15,28:$V1,31:10,32:$V2},o($V3,[2,21]),o($V5,[2,22]),o($V5,[2,26]),o($V5,[2,27]),{13:[1,16]},{13:$V6,28:[1,17],29:[1,18]},o([7,8,9,10,11,12,13,28,29,45,101,103],$V7),o($V5,[2,23]),{33:[1,20]},o($V3,[2,24]),{30:[1,21]},o([13,28,29,45],$V8),{13:$V9,14:27,15:30,16:31,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:37,34:22,35:[2,34],36:23,37:24,38:25,39:26,49:$Vf},{28:[1,38]},{13:$V9,14:27,15:30,16:31,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:37,35:[1,39],36:40,37:24,38:25,39:26,49:$Vf},o($Vg,[2,29]),o($Vg,[2,31]),o($Vg,[2,32]),o($Vg,[2,33]),{13:[1,42],40:41,41:43},{13:[1,44]},{13:$V7,45:[1,45]},{13:[2,9]},{13:[2,10]},{13:[2,11]},{13:[2,12]},{13:[2,13]},{13:[2,14]},{13:[2,15]},{13:$V6},o($V3,[2,25]),o($V5,[2,28]),o($Vg,[2,30]),{28:[1,46],42:$Vh},o($Vi,$Vj,{43:$Vk,45:[1,48]}),o($Vi,[2,36]),{45:[1,50]},o($Vl,$Vm,{15:30,16:31,22:37,46:51,50:52,14:53,13:$V4,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve}),o($Vg,[2,35]),{13:$Vn,41:54},o($Vl,$Vm,{15:30,16:31,22:37,50:52,14:53,46:56,13:$V4,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve}),{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:57,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},o($Vl,$Vm,{15:30,16:31,22:37,50:52,14:53,46:87,13:$V4,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve}),{42:$VB,47:[1,88]},o($Vl,[2,42]),{13:[1,90]},o($Vi,[2,37]),o($Vi,$Vj,{43:$Vk}),{42:$VB,47:[1,91]},o($Vi,[2,38]),o($VC,[2,155]),o($VC,[2,152],{128:[1,92]}),o($VD,[2,150],{126:$VE}),o($VF,[2,148],{123:$VG,124:$VH}),o($VI,[2,145],{118:$VJ,119:$VK,120:$VL,121:$VM}),o($VN,[2,140],{106:$VO,109:$VP}),o($VQ,[2,137],{30:$VR,113:$VS,114:$VT,115:$VU}),o($VV,[2,132]),{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:106,109:$Vz,110:68,111:$VA},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:107,109:$Vz,110:68,111:$VA},o($VV,[2,128]),o($VW,[2,129]),o($VV,[2,130]),{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:108,109:$Vz,110:68,111:$VA},o($VW,[2,2]),o($VW,[2,3]),o($VW,[2,4]),o($VW,[2,5]),o($VW,[2,6]),o($VW,[2,7]),o([13,28,29,30,42,45,47,74,106,109,113,114,115,118,119,120,121,123,124,126,128],$VX),{13:$V4,22:109,29:[1,110]},o($VY,[2,111]),{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:111,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},o($VY,[2,113]),o($VY,[2,114]),o($VY,[2,115]),{13:[1,112]},{13:$V6,45:$VZ},{42:$VB,47:[1,114]},{33:[1,116],52:115},{13:$V4,14:53,15:30,16:31,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:37,50:117},o($Vl,[2,45]),{28:$V_,33:$V$,48:118,51:119},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:122},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:123},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:124},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:125},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:126},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:127},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:128},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:129},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:130},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:131},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:132,109:$Vz,110:68,111:$VA},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:133,109:$Vz,110:68,111:$VA},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:134,109:$Vz,110:68,111:$VA},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:135,109:$Vz,110:68,111:$VA},o($VV,[2,126]),o($VV,[2,127]),o($VV,[2,131]),{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:[1,137],22:86,45:$Vv,76:136,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:138},{13:[1,140]},{47:[1,141]},{45:[1,142]},o($Vl,$V01,{129:58,127:59,125:60,122:61,117:62,116:63,112:64,108:65,110:68,6:69,105:70,100:79,79:82,102:83,78:84,22:86,104:143,44:144,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,45:$Vv,101:$Vw,103:$Vx,106:$Vy,109:$Vz,111:$VA}),{28:$V_,33:$V$,48:145,51:119},o($Vg,[2,48]),{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$V11,14:149,15:30,16:31,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:157,33:$V$,35:[1,147],42:$V21,45:$Vv,51:158,53:146,54:148,55:150,56:151,57:152,58:153,59:154,60:155,61:156,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$V31,82:$V41,91:$V51,92:$V61,93:$V71,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},o($Vl,[2,43]),o($Vg,[2,40]),o($Vg,[2,46]),o($Vg,[2,47]),{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$V11,14:149,15:30,16:31,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:157,33:$V$,35:[1,183],42:$V21,45:$Vv,51:158,53:182,54:148,55:150,56:151,57:152,58:153,59:154,60:155,61:156,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$V31,82:$V41,91:$V51,92:$V61,93:$V71,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},o($VD,[2,151],{126:$VE}),o($VF,[2,149],{123:$VG,124:$VH}),o($VI,[2,146],{118:$VJ,119:$VK,120:$VL,121:$VM}),o($VI,[2,147],{118:$VJ,119:$VK,120:$VL,121:$VM}),o($VN,[2,141],{106:$VO,109:$VP}),o($VN,[2,142],{106:$VO,109:$VP}),o($VN,[2,143],{106:$VO,109:$VP}),o($VN,[2,144],{106:$VO,109:$VP}),o($VQ,[2,138],{30:$VR,113:$VS,114:$VT,115:$VU}),o($VQ,[2,139],{30:$VR,113:$VS,114:$VT,115:$VU}),o($VV,[2,133]),o($VV,[2,134]),o($VV,[2,135]),o($VV,[2,136]),{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,77:184,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:185},o([7,8,9,10,11,12,13,45,101,103],$V8,{29:$VX}),{106:$Vb1},o($VY,[2,110]),o($VY,[2,120],{45:[1,187]}),o($VY,[2,112]),o($Vl,$V01,{129:58,127:59,125:60,122:61,117:62,116:63,112:64,108:65,110:68,6:69,105:70,100:79,79:82,102:83,78:84,22:86,44:144,104:188,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,45:$Vv,101:$Vw,103:$Vx,106:$Vy,109:$Vz,111:$VA}),{42:$Vc1,47:[1,189]},o($Vl,[2,117]),o($Vg,[2,41]),{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$V11,14:149,15:30,16:31,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:157,33:$V$,35:[1,191],42:$V21,45:$Vv,51:158,54:192,55:150,56:151,57:152,58:153,59:154,60:155,61:156,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$V31,82:$V41,91:$V51,92:$V61,93:$V71,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},o($Vg,[2,50]),o($Vd1,[2,53]),{13:$Vn,40:193,41:43},o($Vd1,[2,56]),o($Vd1,$Ve1),o($Vd1,[2,58]),o($Vd1,[2,59]),o($Vd1,[2,60]),o($Vd1,[2,61]),o($Vd1,[2,62]),{13:$V6,45:$VZ},o($Vf1,[2,68]),o($Vf1,[2,69]),o($Vf1,[2,70]),o($Vf1,[2,71]),o($Vf1,[2,72]),o($Vf1,[2,73]),o($Vf1,[2,74]),o($Vf1,[2,75]),o($Vg1,$V7,{74:[1,194]}),{45:[1,195]},{45:[1,196]},{45:[1,197]},o($Vf1,[2,76]),{28:[1,198]},{45:[1,199]},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$V11,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:200,56:151,57:152,58:153,59:154,60:155,61:156,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$V31,82:$V41,91:$V51,92:$V61,93:$V71,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},{28:[1,201]},{28:[1,202]},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,28:[1,204],44:203,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},o($Vh1,[2,80]),o($Vh1,[2,81]),o($Vi1,[2,82]),o($Vi1,[2,83]),{106:$Vb1,107:$Vj1},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$V11,14:149,15:30,16:31,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:157,33:$V$,35:[1,206],42:$V21,45:$Vv,51:158,54:192,55:150,56:151,57:152,58:153,59:154,60:155,61:156,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$V31,82:$V41,91:$V51,92:$V61,93:$V71,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},o($Vk1,[2,52]),o($Vl1,[2,123]),{107:$Vj1},{106:[1,207]},o($Vl,$V01,{129:58,127:59,125:60,122:61,117:62,116:63,112:64,108:65,110:68,6:69,105:70,100:79,79:82,102:83,78:84,22:86,44:144,104:208,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,45:$Vv,101:$Vw,103:$Vx,106:$Vy,109:$Vz,111:$VA}),{42:$Vc1,47:[1,209]},o($Vi1,[2,121]),{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:210,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},o($Vg,[2,49]),o($Vd1,[2,54]),{28:[1,211],42:$Vh},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$V11,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:212,56:151,57:152,58:153,59:154,60:155,61:156,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$V31,82:$V41,91:$V51,92:$V61,93:$V71,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:213,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:214,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,14:217,15:30,16:31,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:157,45:$Vv,75:218,76:177,77:178,78:179,79:180,94:215,96:216,100:79,101:$Vw,102:83,103:$Vx,105:181},o($Vf1,[2,79]),{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:219,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},{91:[1,220]},o($Vf1,[2,106]),o($Vf1,[2,107]),{28:[1,221]},o($Vf1,[2,109]),o($Vl1,[2,125]),o($Vk1,[2,51]),o([7,8,9,10,11,12,13,28,42,45,47,101,103],[2,124]),{42:$Vc1,47:[1,222]},o($Vi1,[2,116]),o($Vl,[2,118]),o($Vd1,[2,55]),o($Vd1,[2,77]),{47:[1,223]},{47:[1,224]},{28:[1,225]},{28:[2,101],42:$Vm1},{13:$Vn,40:227,41:43},o($Vh1,[2,104]),{47:[1,228]},{45:[1,229]},o($Vf1,[2,108]),o($Vi1,[2,122]),{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vn1,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:230,56:232,57:152,58:153,59:154,60:155,61:156,62:231,63:233,64:234,65:235,66:236,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$Vo1,82:$V41,91:$Vp1,92:$V61,93:$Vq1,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$V11,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:241,56:151,57:152,58:153,59:154,60:155,61:156,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$V31,82:$V41,91:$V51,92:$V61,93:$V71,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:242,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,75:243,76:177,77:178,78:179,79:180,100:79,101:$Vw,102:83,103:$Vx,105:181},{28:[2,102],42:$Vh},{33:[1,245],83:244},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:246,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},o($Vd1,[2,84]),{81:[1,247]},o($Vf1,$Ve1),{81:[2,64]},{81:[2,65]},{81:[2,66]},{81:[2,67]},o($Vg1,$V7,{74:[1,248]}),{45:[1,249]},{45:[1,250]},{45:[1,251]},o($Vd1,[2,96]),{28:[1,252]},o($Vh1,[2,105]),o($Vf1,[2,87]),{84:[1,253]},{47:[1,254]},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$V11,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:255,56:151,57:152,58:153,59:154,60:155,61:156,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$V31,82:$V41,91:$V51,92:$V61,93:$V71,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vn1,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:212,56:232,57:152,58:153,59:154,60:155,61:156,62:256,63:233,64:234,65:235,66:236,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$Vo1,82:$V41,91:$Vp1,92:$V61,93:$Vq1,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:257,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:258,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,14:217,15:30,16:31,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:157,45:$Vv,75:218,76:177,77:178,78:179,79:180,94:259,96:216,100:79,101:$Vw,102:83,103:$Vx,105:181},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,75:218,76:177,77:178,78:179,79:180,95:260,96:261,100:79,101:$Vw,102:83,103:$Vx,105:181},{85:262,88:263,89:$Vr1,90:$Vs1},{28:[1,266]},o($Vd1,[2,85]),{81:[2,78]},{47:[1,267]},{47:[1,268]},{28:[1,269]},{47:[1,270]},{42:$Vm1,47:[2,103]},{35:[1,271],88:272,89:$Vr1,90:$Vs1},o($Vt1,[2,92]),{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:273,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},{74:[1,274]},o($Vf1,[2,98]),{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vn1,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:230,56:232,57:152,58:153,59:154,60:155,61:156,62:275,63:233,64:234,65:235,66:236,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$Vo1,82:$V41,91:$Vp1,92:$V61,93:$Vq1,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vn1,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:241,56:232,57:152,58:153,59:154,60:155,61:156,62:276,63:233,64:234,65:235,66:236,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$Vo1,82:$V41,91:$Vp1,92:$V61,93:$Vq1,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},{6:69,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,44:277,45:$Vv,78:84,79:82,100:79,101:$Vw,102:83,103:$Vx,105:70,106:$Vy,108:65,109:$Vz,110:68,111:$VA,112:64,116:63,117:62,122:61,125:60,127:59,129:58},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$V11,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:278,56:151,57:152,58:153,59:154,60:155,61:156,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$V31,82:$V41,91:$V51,92:$V61,93:$V71,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},o($Vf1,[2,88]),o($Vt1,[2,93]),{74:[1,279]},o($Vt1,[2,95]),{81:[1,280]},{81:[2,97]},{28:[1,281]},o($Vd1,[2,99]),o($Vt1,[2,94]),{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vn1,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:255,56:232,57:152,58:153,59:154,60:155,61:156,62:282,63:233,64:234,65:235,66:236,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$Vo1,82:$V41,91:$Vp1,92:$V61,93:$Vq1,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vu,22:86,45:$Vv,75:218,76:177,77:178,78:179,79:180,95:283,96:261,100:79,101:$Vw,102:83,103:$Vx,105:181},{81:[2,86]},{47:[1,284]},{6:139,7:$Vo,8:$Vp,9:$Vq,10:$Vr,11:$Vs,12:$Vt,13:$Vn1,22:86,33:$V$,42:$V21,45:$Vv,51:158,55:278,56:232,57:152,58:153,59:154,60:155,61:156,62:285,63:233,64:234,65:235,66:236,67:159,68:160,69:161,70:162,71:163,72:164,73:165,75:171,76:177,77:178,78:179,79:180,80:$Vo1,82:$V41,91:$Vp1,92:$V61,93:$Vq1,97:$V81,98:$V91,99:$Va1,100:79,101:$Vw,102:83,103:$Vx,105:181},{81:[2,100]}],
defaultActions: {6:[2,1],30:[2,9],31:[2,10],32:[2,11],33:[2,12],34:[2,13],35:[2,14],36:[2,15],233:[2,64],234:[2,65],235:[2,66],236:[2,67],256:[2,78],276:[2,97],282:[2,86],285:[2,100]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 109;
break;
case 4:return 107;
break;
case 5:return 111;
break;
case 6:return 124;
break;
case 7: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 12; 
break;
case 8:return 114;
break;
case 9:return 126;
break;
case 10:return 45;
break;
case 11:return 'MENOS_UNARIO';
break;
case 12:return 7;
break;
case 13:return 8;
break;
case 14:return 11;
break;
case 15:return 47;
break;
case 16:return 30;
break;
case 17:return 29;
break;
case 18:return 42;
break;
case 19:return 113;
break;
case 20:return 74;
break;
case 21:return 28;
break;
case 22:return 'COMILLA_DOBLE';
break;
case 23:return 'BARRA_INVERTIDA';
break;
case 24:return 'SALTO_LINEA';
break;
case 25:return 'RETORNO_CARROS';
break;
case 26:return 'TABULACION';
break;
case 27:return 115;
break;
case 28:return 33;
break;
case 29:return 128;
break;
case 30:return 35;
break;
case 31:return 106;
break;
case 32:return 120;
break;
case 33:return 123;
break;
case 34:return 121;
break;
case 35:return 119;
break;
case 36:return 118;
break;
case 37:return 43
break;
case 38:return 20;
break;
case 39:return 97;
break;
case 40:return 89;
break;
case 41:return 18;
break;
case 42:return 32;
break;
case 43:return 98;
break;
case 44:return 90;
break;
case 45:return 92;
break;
case 46:return 21;
break;
case 47:return 81;
break;
case 48:return 10;
break;
case 49:return 93;
break;
case 50:return 80;
break;
case 51:return 27;
break;
case 52:return 17;
break;
case 53:return 'MAIN';
break;
case 54:return 103;
break;
case 55:return 99;
break;
case 56:return 19;
break;
case 57:return 82;
break;
case 58:return 'IMPRIMIR_L';
break;
case 59:return 'IMPRIMIR';
break;
case 60:return 101;
break;
case 61:return 9;
break;
case 62:return 49;
break;
case 63:return 91;
break;
case 64:return 13;
break;
case 65:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:-)/,/^(?:--)/,/^(?:!)/,/^(?:!=)/,/^(?:"[^\"]*")/,/^(?:%)/,/^(?:&&)/,/^(?:\()/,/^(?:\(\*-1\))/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:\(\[a-zA-Z\]\|\\n\|\\t\|\\r\|\\\\\|\\\\"\))/,/^(?:\))/,/^(?:\*)/,/^(?:\.)/,/^(?:,)/,/^(?:\/)/,/^(?::)/,/^(?:;)/,/^(?:")/,/^(?:\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:\^)/,/^(?:\{)/,/^(?:\|\|)/,/^(?:\})/,/^(?:\+)/,/^(?:<=)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:boolean\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:import\b)/,/^(?:int\b)/,/^(?:main\b)/,/^(?:new\b)/,/^(?:return\b)/,/^(?:String\b)/,/^(?:switch\b)/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:this\b)/,/^(?:true\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:([a-zA-Z]|_)[a-zA-Z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}