/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,11],$V2=[1,12],$V3=[28,29,33],$V4=[1,14],$V5=[5,29,33],$V6=[2,18],$V7=[1,28],$V8=[1,31],$V9=[1,32],$Va=[1,33],$Vb=[1,34],$Vc=[1,35],$Vd=[1,27],$Ve=[14,18,19,20,21,22,36,50],$Vf=[2,17],$Vg=[1,47],$Vh=[29,45],$Vi=[2,40],$Vj=[1,49],$Vk=[29,42,45],$Vl=[45,48],$Vm=[2,46],$Vn=[1,70],$Vo=[1,71],$Vp=[1,72],$Vq=[1,73],$Vr=[1,74],$Vs=[1,75],$Vt=[1,77],$Vu=[1,69],$Vv=[1,63],$Vw=[1,79],$Vx=[1,82],$Vy=[1,68],$Vz=[1,84],$VA=[1,89],$VB=[29,31,42,45,48,69,81,104,119,120,121,124,125,126,127,129,130,132,134],$VC=[29,31,42,45,48,69,81,104,119,120,121,124,125,126,127,129,130,134],$VD=[1,93],$VE=[29,31,42,45,48,69,81,104,119,120,121,124,125,126,127,132,134],$VF=[1,94],$VG=[1,95],$VH=[29,31,42,45,48,69,81,104,119,120,121,129,130,132,134],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[29,31,42,45,48,81,119,120,121,124,125,126,127,129,130,132,134],$VN=[1,100],$VO=[1,101],$VP=[1,102],$VQ=[1,103],$VR=[1,105],$VS=[29,30,31,42,45,48,69,81,104,119,120,121,124,125,126,127,129,130,132,134],$VT=[2,9],$VU=[1,111],$VV=[1,109],$VW=[1,110],$VX=[2,139],$VY=[1,141],$VZ=[1,142],$V_=[1,165],$V$=[1,182],$V01=[1,169],$V11=[1,170],$V21=[1,166],$V31=[1,172],$V41=[1,167],$V51=[1,173],$V61=[1,168],$V71=[1,174],$V81=[1,175],$V91=[1,176],$Va1=[29,42,45,48,69,81,104,120,124,125,126,127,129,130,132,134],$Vb1=[1,184],$Vc1=[7,8,9,10,11,12,14,18,19,20,21,22,34,36,46,65,67,86,90,96,97,98,99,100,106,107,108,110,112],$Vd1=[2,81],$Ve1=[1,193],$Vf1=[1,202],$Vg1=[29,30],$Vh1=[7,8,9,10,11,12,14,18,19,20,21,22,34,36,46,50,65,67,86,87,90,96,97,98,99,100,106,107,108,110,112],$Vi1=[1,220],$Vj1=[7,8,9,10,11,12,14,18,19,20,21,22,34,36,46,65,67,86,90,98,99,100,106,107,108,110,112],$Vk1=[1,257],$Vl1=[1,258],$Vm1=[1,262],$Vn1=[7,8,9,10,11,12,14,18,19,20,21,22,34,36,46,65,67,86,87,90,96,97,98,99,100,106,107,108,110,112];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"goal":3,"compilationunit":4,"EOF":5,"literal":6,"LITERAL_INT":7,"LITERAL_DOUBLE":8,"LITERAL_TRUE":9,"LITERAL_FALSE":10,"LITERAL_CHAR":11,"LITERAL_STRING":12,"methodinvocation":13,"IDENTIFICADOR":14,"type":15,"primitivetype":16,"classorinterfacetype":17,"INT":18,"CHAR":19,"STRING":20,"BOOLEAN":21,"DOUBLE":22,"name":23,"importdeclarations":24,"typedeclarations":25,"importdeclaration":26,"typedeclaration":27,"IMPORT":28,"PUNTO_COMA":29,"PUNTO":30,"MULTIPLICACION":31,"classdeclaration":32,"CLASS":33,"LLAVE_APERTURA":34,"classbodydeclarations":35,"LLAVE_CIERRE":36,"classbodydeclaration":37,"fielddeclaration":38,"methoddeclaration":39,"constructordeclaration":40,"variabledeclarators":41,"IGUAL":42,"expression":43,"variabledeclarator":44,"COMA":45,"PAR_APERTURA":46,"formalparameterlist":47,"PAR_CIERRE":48,"methodbody":49,"VOID":50,"formalparameter":51,"block":52,"constructorbody":53,"blockstatements":54,"blockstatement":55,"localvariabledeclaration":56,"statement":57,"statementwithouttrailingsubstatement":58,"labeledstatement":59,"ifthenstatement":60,"ifthenelsestatement":61,"whilestatement":62,"forstatement":63,"printstatement":64,"IMPRIMIR":65,"expressionlistprint":66,"IMPRIMIR_L":67,"expressionlist":68,"SUMA":69,"statementnoshortif":70,"labeledstatementnoshortif":71,"ifthenelsestatementnoshortif":72,"whilestatementnoshortif":73,"forstatementnoshortif":74,"expressionstatement":75,"switchstatement":76,"dostatement":77,"breakstatement":78,"continuestatement":79,"returnstatement":80,"DOS_PUNTOS":81,"statementexpression":82,"postincrementexpression":83,"postdecrementexpression":84,"classinstancecreationexpression":85,"IF":86,"ELSE":87,"elseifblocks":88,"elseifblock":89,"SWITCH":90,"switchblock":91,"switchblockstatementgroups":92,"switchlabels":93,"switchblockstatementgroup":94,"switchlabel":95,"CASE":96,"DEFAULT":97,"WHILE":98,"DO":99,"FOR":100,"forinit":101,"forupdate":102,"assignmentexpression":103,"RESTA":104,"statementexpressionlist":105,"BREAK":106,"CONTINUE":107,"RETURN":108,"primary":109,"THIS":110,"fieldaccess":111,"NEW":112,"argumentlist":113,"DECREMENTO":114,"unaryexpression":115,"unaryexpressionnotplusminus":116,"NOT":117,"multiplicativeexpression":118,"DIVISION":119,"MODULO":120,"POTENCIA":121,"additiveexpression":122,"relationalexpression":123,"MENOR_QUE":124,"MAYOR_QUE":125,"MENOR_IGUAL":126,"MAYOR_IGUAL":127,"equalityexpression":128,"IGUALDAD":129,"DISTINTO":130,"conditionalandexpression":131,"AND":132,"conditionalorexpression":133,"OR":134,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"LITERAL_INT",8:"LITERAL_DOUBLE",9:"LITERAL_TRUE",10:"LITERAL_FALSE",11:"LITERAL_CHAR",12:"LITERAL_STRING",14:"IDENTIFICADOR",18:"INT",19:"CHAR",20:"STRING",21:"BOOLEAN",22:"DOUBLE",28:"IMPORT",29:"PUNTO_COMA",30:"PUNTO",31:"MULTIPLICACION",33:"CLASS",34:"LLAVE_APERTURA",36:"LLAVE_CIERRE",42:"IGUAL",45:"COMA",46:"PAR_APERTURA",48:"PAR_CIERRE",50:"VOID",65:"IMPRIMIR",67:"IMPRIMIR_L",68:"expressionlist",69:"SUMA",81:"DOS_PUNTOS",86:"IF",87:"ELSE",90:"SWITCH",96:"CASE",97:"DEFAULT",98:"WHILE",99:"DO",100:"FOR",104:"RESTA",106:"BREAK",107:"CONTINUE",108:"RETURN",110:"THIS",112:"NEW",114:"DECREMENTO",117:"NOT",119:"DIVISION",120:"MODULO",121:"POTENCIA",124:"MENOR_QUE",125:"MAYOR_QUE",126:"MENOR_IGUAL",127:"MAYOR_IGUAL",129:"IGUALDAD",130:"DISTINTO",132:"AND",134:"OR"},
productions_: [0,[3,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[15,1],[15,1],[16,1],[16,1],[16,1],[16,1],[16,1],[17,1],[23,1],[4,2],[24,1],[24,2],[25,1],[25,2],[26,3],[26,5],[26,0],[27,1],[27,1],[32,5],[35,1],[35,2],[37,1],[37,1],[37,1],[37,0],[38,3],[38,5],[41,1],[41,3],[44,1],[44,3],[39,6],[39,6],[47,1],[47,3],[47,0],[51,2],[49,1],[49,1],[40,5],[53,3],[53,2],[52,3],[52,2],[54,1],[54,2],[55,1],[55,1],[55,0],[56,3],[56,2],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[64,5],[64,5],[64,4],[66,3],[66,1],[70,1],[70,1],[70,1],[70,1],[70,1],[70,2],[70,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[59,3],[71,3],[75,2],[82,1],[82,1],[82,1],[82,1],[60,5],[61,7],[72,6],[88,2],[88,1],[89,6],[89,2],[89,0],[76,5],[91,4],[92,1],[92,2],[92,0],[94,2],[93,1],[93,2],[93,0],[95,3],[95,2],[62,5],[73,5],[77,7],[63,9],[74,9],[101,3],[101,2],[102,3],[102,3],[105,1],[105,3],[78,2],[79,2],[80,3],[80,2],[109,1],[109,1],[109,3],[109,1],[109,1],[109,1],[85,5],[113,1],[113,3],[113,0],[111,3],[13,4],[13,6],[83,3],[84,2],[115,2],[115,1],[115,1],[116,1],[116,1],[116,2],[116,3],[118,1],[118,3],[118,3],[118,3],[118,3],[122,1],[122,3],[122,3],[123,1],[123,3],[123,3],[123,3],[123,3],[128,1],[128,3],[128,3],[131,1],[131,3],[133,1],[133,3],[103,1],[43,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return {root: $$[$0-1]}
break;
case 2: case 3: case 4: case 5: case 6: case 7: case 8: case 9: case 18: case 27: case 32: case 40: case 95: case 146: case 148: case 149: case 165: case 168:
this.$ = $$[$0]
break;
case 19:
this.$ = {imports:$$[$0-1], clases: $$[$0]}
break;
case 20: case 22: case 30: case 38:
this.$ = [$$[$0]]
break;
case 21: case 23:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1]
break;
case 24:
this.$ = {clase: $$[$0-1]}
break;
case 25:
this.$ = {clase: $$[$0-3]}
break;
case 29:
this.$ = {nombre: $$[$0-3], cuerpo: $$[$0-1]} 
break;
case 31:
$$[$0-1].push($$[$0]) ;this.$ = $$[$0-1]
break;
case 36:
this.$ = {operacion: "declaracion", tipo: $$[$0-2], declaradas: $$[$0-1]}
break;
case 37:
this.$ = {operacion: "declaracion_asign",tipo: $$[$0-4], declaradas: $$[$0-3], valor: $$[$0-1]}
break;
case 39:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2]
break;
case 41:
this.$ = $$[$0-2]
break;
case 126:
this.$={instruccion: $$[$0-1]}
break;
case 127:
this.$ = {instruccion: $$[$0-1]}
break;
case 128:
this.$= {instruccion: $$[$0-2], valor: $$[$0-1]}
break;
case 129:
this.$= {instruccion: $$[$0-1], valor: "null"}
break;
case 130: case 131: case 133: case 134: case 135: case 147: case 152: case 157: case 160:
this.$=$$[$0]
break;
case 132: case 151:
this.$=$$[$0-1]
break;
case 136:
this.$= {operacion: $$[$0-4], id: $$[$0-3], argumentos:[$$[$0-1]] }
break;
case 137:
this.$=[$$[$0]]
break;
case 138:
$$[$0-2].push($$[$0]), this.$=$$[$0-2]
break;
case 140:
this.$={clase:"acceso_atributo", atributo: $$[$0]}
break;
case 141:
this.$ = {clase: "metodo", id: $$[$0-3], argumentos: $$[$0] }
break;
case 142:
this.$ = {clase: "metodo", id: $$[$0-3], argumentos: $$[$0-1] }
break;
case 143:
this.$={operador:"+", operador:[$$[$0-2],"1"]}
break;
case 144:
this.$={operador:"-", operador:[$$[$0-1],"1"]}
break;
case 145: case 150:
this.$={operador: $$[$0-1], operando: [$$[$0]]}
break;
case 153: case 154: case 155: case 156: case 158: case 159: case 161: case 162: case 163: case 164: case 166: case 167:
this.$={operador: $$[$0-1], operandos:[$$[$0-2],$$[$0-1]]}
break;
case 169:
this.$={operador: $$[$0-1], operandos:[$$[$0-2],$$[$0]]}
break;
case 170: case 172: case 173:
 this.$= $$[$0]
break;
case 171:
 this.$= {operador: $$[$0-1], operandos: [$$[$0-2],$$[$0]]}
break;
}
},
table: [o([29,33],[2,26],{3:1,4:2,24:3,26:4,28:$V0}),{1:[3]},{5:[1,6]},{25:7,26:8,27:9,28:$V0,29:$V1,32:10,33:$V2},o($V3,[2,20]),{14:$V4,23:13},{1:[2,1]},{5:[2,19],27:15,29:$V1,32:10,33:$V2},o($V3,[2,21]),o($V5,[2,22]),o($V5,[2,27]),o($V5,[2,28]),{14:[1,16]},{29:[1,17],30:[1,18]},o([14,29,30,42],$V6),o($V5,[2,23]),{34:[1,19]},o($V3,[2,24]),{31:[1,20]},{14:$V7,15:26,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,35:21,36:[2,35],37:22,38:23,39:24,40:25,50:$Vd},{29:[1,37]},{14:$V7,15:26,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,36:[1,38],37:39,38:23,39:24,40:25,50:$Vd},o($Ve,[2,30]),o($Ve,[2,32]),o($Ve,[2,33]),o($Ve,[2,34]),{14:[1,41],41:40,44:42},{14:[1,43]},{14:$V6,46:[1,44]},{14:[2,10]},{14:[2,11]},{14:[2,12]},{14:[2,13]},{14:[2,14]},{14:[2,15]},{14:[2,16]},{14:$Vf},o($V3,[2,25]),o($V5,[2,29]),o($Ve,[2,31]),{29:[1,45],42:[1,46],45:$Vg},o($Vh,$Vi,{42:$Vj,46:[1,48]}),o($Vk,[2,38]),{46:[1,50]},o($Vl,$Vm,{16:29,17:30,23:36,47:51,51:52,15:53,14:$V4,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc}),o($Ve,[2,36]),{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:54,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},{14:$Vz,44:83},o($Vl,$Vm,{16:29,17:30,23:36,51:52,15:53,47:85,14:$V4,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc}),{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:86,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},o($Vl,$Vm,{16:29,17:30,23:36,51:52,15:53,47:87,14:$V4,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc}),{45:$VA,48:[1,88]},o($Vl,[2,44]),{14:[1,90]},{29:[1,91]},o($VB,[2,173]),o([29,31,42,45,48,69,81,104,119,120,121,124,125,126,127,129,130,132],[2,172],{134:[1,92]}),o($VC,[2,170],{132:$VD}),o($VE,[2,168],{129:$VF,130:$VG}),o($VH,[2,165],{124:$VI,125:$VJ,126:$VK,127:$VL}),o($VM,[2,160],{69:$VN,104:$VO}),o([29,42,45,48,69,81,104,124,125,126,127,129,130,132,134],[2,157],{31:$VP,119:$VQ,120:[1,104],121:$VR}),o($VB,[2,152]),{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:106,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},o($VB,[2,146]),o($VS,[2,147]),o($VB,[2,148]),o($VB,[2,149]),{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:107,116:64,117:$Vy},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:108,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},o($VS,[2,2]),o($VS,[2,3]),o($VS,[2,4]),o($VS,[2,5]),o($VS,[2,6]),o($VS,[2,7]),o($VS,[2,8]),o([29,30,31,42,45,48,81,104,119,120,121,124,125,126,127,129,130,132,134],$VT,{46:$VU,69:$VV,114:$VW}),{30:[1,112]},{30:[2,131]},{30:[2,133]},{30:[2,134]},{14:[1,113]},o($Vk,[2,39]),o($Vh,$Vi,{42:$Vj}),{45:$VA,48:[1,114]},o($Vk,[2,41]),{45:$VA,48:[1,115]},{34:[1,117],53:116},{14:$V4,15:53,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,51:118},o($Vl,[2,47]),o($Ve,[2,37]),{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:119},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:120},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:121},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:122},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:123},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:124},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:125},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:126},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:127},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:128},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:129,116:64,117:$Vy},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:130,116:64,117:$Vy},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:131,116:64,117:$Vy},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:132,116:64,117:$Vy},o($VB,[2,145]),o($VB,[2,150]),{48:[1,133]},{69:[1,134]},o($VB,[2,144]),o($Vl,$VX,{103:55,133:56,131:57,128:58,123:59,122:60,118:61,115:62,116:64,6:65,83:66,84:67,13:76,109:78,85:80,111:81,113:135,43:136,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,14:$Vt,46:$Vu,104:$Vv,110:$Vw,112:$Vx,117:$Vy}),{14:[1,137]},{46:[1,138]},{29:$VY,34:$VZ,49:139,52:140},{29:$VY,34:$VZ,49:143,52:140},o($Ve,[2,50]),{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$V_,15:149,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$VZ,36:[1,145],41:150,44:42,46:$V$,52:158,54:144,55:146,56:147,57:148,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},o($Vl,[2,45]),o($VC,[2,171],{132:$VD}),o($VE,[2,169],{129:$VF,130:$VG}),o($VB,[2,166]),o($VH,[2,167],{124:$VI,125:$VJ,126:$VK,127:$VL}),o($VM,[2,161],{69:$VN,104:$VO}),o($VM,[2,162],{69:$VN,104:$VO}),o($VM,[2,163],{69:$VN,104:$VO}),o($VM,[2,164],{69:$VN,104:$VO}),o($Va1,[2,158],{31:$VP,119:$VQ,121:$VR}),o($Va1,[2,159],{31:$VP,119:$VQ,121:$VR}),o($VB,[2,153]),o($VB,[2,154]),o($VB,[2,155]),o($VB,[2,156]),o($VS,[2,151]),o($VB,[2,143]),{45:$Vb1,48:[1,183]},o($Vl,[2,137]),{30:[2,140],46:[1,185]},o($Vl,$VX,{103:55,133:56,131:57,128:58,123:59,122:60,118:61,115:62,116:64,6:65,83:66,84:67,13:76,109:78,85:80,111:81,43:136,113:186,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,14:$Vt,46:$Vu,104:$Vv,110:$Vw,112:$Vx,117:$Vy}),o($Ve,[2,42]),o($Ve,[2,48]),o($Ve,[2,49]),{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$V_,15:149,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$VZ,36:[1,188],41:150,44:42,46:$V$,52:158,54:187,55:146,56:147,57:148,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},o($Ve,[2,43]),{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$V_,15:149,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$VZ,36:[1,189],41:150,44:42,46:$V$,52:158,55:190,56:147,57:148,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},o($Ve,[2,52]),o($Vc1,[2,55]),o($Vc1,[2,57]),o($Vc1,[2,58]),{14:$Vz,41:191,44:42},{29:[1,192],45:$Vg},o($Vc1,[2,62]),o($Vc1,[2,63]),o($Vc1,[2,64]),o($Vc1,[2,65]),o($Vc1,[2,66]),o($Vc1,[2,67]),o($Vc1,[2,68]),o($Vc1,$Vd1),o($Vc1,[2,82]),o($Vc1,[2,83]),o($Vc1,[2,84]),o($Vc1,[2,85]),o($Vc1,[2,86]),o($Vc1,[2,87]),o([14,29,30,45],$Vi,{42:$Vj,46:$VU,69:$VV,81:$Ve1,114:$VW}),{46:[1,194]},{46:[1,195]},{46:[1,196]},{46:[1,197]},{46:[1,198]},{29:[1,199]},{46:[1,200]},{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$Vf1,34:$VZ,46:$V$,52:158,57:201,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},{29:[1,203]},{29:[1,204]},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,29:[1,206],43:205,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},{29:[2,92]},{29:[2,93]},o($Vg1,[2,94]),o($Vg1,[2,95]),{30:[2,130]},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:207,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},o($VS,[2,141]),{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:208,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},o($Vl,$VX,{103:55,133:56,131:57,128:58,123:59,122:60,118:61,115:62,116:64,6:65,83:66,84:67,13:76,109:78,85:80,111:81,43:136,113:209,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,14:$Vt,46:$Vu,104:$Vv,110:$Vw,112:$Vx,117:$Vy}),{45:$Vb1,48:[1,210]},{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$V_,15:149,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$VZ,36:[1,211],41:150,44:42,46:$V$,52:158,55:190,56:147,57:148,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},o($Vh1,[2,54]),o($Ve,[2,51]),o($Vc1,[2,56]),{29:[1,212],45:$Vg},o($Vc1,[2,61]),{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$Vf1,34:$VZ,46:$V$,52:158,57:213,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:214,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:215,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},{14:$V4,15:218,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:217,101:216},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:221,46:$Vu,66:219,68:$Vi1,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:221,46:$Vu,48:[1,223],66:222,68:$Vi1,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},o($Vc1,[2,91]),{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:224,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},{98:[1,225]},{30:$VT,46:$VU,69:$VV,81:$Ve1,114:$VW},o($Vc1,[2,126]),o($Vc1,[2,127]),{29:[1,226]},o($Vc1,[2,129]),{48:[1,227]},o($Vl,[2,138]),{45:$Vb1,48:[1,228]},o($Vg1,[2,136]),o($Vh1,[2,53]),o($Vc1,[2,60]),o($Vc1,[2,89]),{48:[1,229]},{48:[1,230]},{29:[1,231]},{14:$Vf,42:[1,232]},{14:$Vz,41:233,44:42},{48:[1,234]},{69:[1,235]},{48:[2,73]},{48:[1,236]},{29:[1,237]},{48:[1,238]},{46:[1,239]},o($Vc1,[2,128]),{30:[2,132]},o($VS,[2,142]),{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$Vf1,34:$VZ,46:$V$,52:241,57:240,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$Vf1,34:$VZ,46:$V$,52:158,57:242,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:243,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,46:$Vu,83:66,84:67,85:80,103:244,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},{29:[2,121],45:$Vg},{29:[1,245]},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:246,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},{29:[1,247]},o($Vc1,[2,71]),{34:[1,249],91:248},{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:250,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},o($Vc1,[2,96]),o($Vc1,$Vd1,{87:[1,251]}),o($Vc1,[2,115]),{29:[1,252]},{29:[2,120]},o($Vc1,[2,69]),{48:[2,72]},o($Vc1,[2,70]),o($Vc1,[2,104]),o($Vj1,[2,108],{92:253,94:254,93:255,95:256,96:$Vk1,97:$Vl1}),{48:[1,259]},o($Vc1,[2,103],{88:260,89:261,87:$Vm1}),{14:[1,264],102:263},o($Vj1,[2,112],{95:256,93:265,94:266,96:$Vk1,97:$Vl1}),o($Vc1,[2,106]),{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$V_,15:149,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$VZ,36:[2,59],41:150,44:42,46:$V$,52:158,54:267,55:146,56:147,57:148,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,95:268,96:$Vk1,97:$Vl1,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},o($Vc1,[2,110]),{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:269,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},{81:[1,270]},{29:[1,271]},o($Vc1,[2,97],{89:272,87:$Vm1}),o($Vn1,[2,100]),{34:$VZ,52:274,86:[1,273]},{48:[1,275]},{69:[1,276],104:[1,277]},{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$V_,15:149,16:29,17:30,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,23:36,34:$VZ,36:[1,278],41:150,44:42,46:$V$,52:158,54:267,55:146,56:147,57:148,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,95:268,96:$Vk1,97:$Vl1,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},o($Vc1,[2,107]),o([36,96,97],[2,109],{16:29,17:30,23:36,44:42,109:78,111:81,56:147,57:148,15:149,41:150,58:151,59:152,60:153,61:154,62:155,63:156,64:157,52:158,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,13:179,85:180,6:181,55:190,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,14:$V_,18:$V8,19:$V9,20:$Va,21:$Vb,22:$Vc,34:$VZ,46:$V$,65:$V01,67:$V11,86:$V21,90:$V31,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,110:$Vw,112:$Vx}),o($Vc1,[2,111]),{81:[1,279]},o($Vc1,[2,114]),o($Vc1,[2,117]),o($Vn1,[2,99]),{46:[1,280]},o($Vn1,[2,102]),{6:181,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:179,14:$Vf1,34:$VZ,46:$V$,52:158,57:281,58:151,59:152,60:153,61:154,62:155,63:156,64:157,65:$V01,67:$V11,75:159,76:160,77:161,78:162,79:163,80:164,82:171,83:177,84:178,85:180,86:$V21,90:$V31,98:$V41,99:$V51,100:$V61,106:$V71,107:$V81,108:$V91,109:78,110:$Vw,111:81,112:$Vx},{69:[1,282]},{104:[1,283]},o($Vc1,[2,105]),o($Vc1,[2,113]),{6:65,7:$Vn,8:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:76,14:$Vt,43:284,46:$Vu,83:66,84:67,85:80,103:55,104:$Vv,109:78,110:$Vw,111:81,112:$Vx,115:62,116:64,117:$Vy,118:61,122:60,123:59,128:58,131:57,133:56},o($Vc1,[2,118]),{48:[2,122]},{48:[2,123]},{48:[1,285]},{34:$VZ,52:286},o($Vn1,[2,101])],
defaultActions: {6:[2,1],29:[2,10],30:[2,11],31:[2,12],32:[2,13],33:[2,14],34:[2,15],35:[2,16],36:[2,17],79:[2,131],80:[2,133],81:[2,134],177:[2,92],178:[2,93],181:[2,130],221:[2,73],227:[2,132],244:[2,120],246:[2,72],282:[2,122],283:[2,123]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 114;
break;
case 4:return 104;
break;
case 5:return 130;
break;
case 6:return 117;
break;
case 7: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 12; 
break;
case 8:return 120;
break;
case 9:return 132;
break;
case 10:return 46;
break;
case 11:return 'MENOS_UNARIO';
break;
case 12:return 8;
break;
case 13:return 7;
break;
case 14:return 11;
break;
case 15:return 67;
break;
case 16:return 65;
break;
case 17:return 48;
break;
case 18:return 31;
break;
case 19:return 30;
break;
case 20:return 45;
break;
case 21:return 119;
break;
case 22:return 81;
break;
case 23:return 29;
break;
case 24:return 'COMILLA_DOBLE';
break;
case 25:return 'BARRA_INVERTIDA';
break;
case 26:return 'SALTO_LINEA';
break;
case 27:return 'RETORNO_CARROS';
break;
case 28:return 'TABULACION';
break;
case 29:return 121;
break;
case 30:return 34;
break;
case 31:return 134;
break;
case 32:return 36;
break;
case 33:return 69;
break;
case 34:return 126;
break;
case 35:return 129;
break;
case 36:return 127;
break;
case 37:return 125;
break;
case 38:return 124;
break;
case 39:return 42
break;
case 40:return 21;
break;
case 41:return 106;
break;
case 42:return 96;
break;
case 43:return 19;
break;
case 44:return 33;
break;
case 45:return 107;
break;
case 46:return 97;
break;
case 47:return 99;
break;
case 48:return 22;
break;
case 49:return 87;
break;
case 50:return 10;
break;
case 51:return 100;
break;
case 52:return 86;
break;
case 53:return 28;
break;
case 54:return 18;
break;
case 55:return 112;
break;
case 56:return 108;
break;
case 57:return 20;
break;
case 58:return 90;
break;
case 59:return 110;
break;
case 60:return 9;
break;
case 61:return 50;
break;
case 62:return 98;
break;
case 63:return 14;
break;
case 64:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:--)/,/^(?:-)/,/^(?:!=)/,/^(?:!)/,/^(?:"([^\\]|\\.)*")/,/^(?:%)/,/^(?:&&)/,/^(?:\()/,/^(?:\(\*-1\))/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:'([^\\]|\\.?)')/,/^(?:System\.out\.println\b)/,/^(?:System\.out\.print\b)/,/^(?:\))/,/^(?:\*)/,/^(?:\.)/,/^(?:,)/,/^(?:\/)/,/^(?::)/,/^(?:;)/,/^(?:")/,/^(?:\\)/,/^(?:\\n)/,/^(?:\\r)/,/^(?:\\t)/,/^(?:\^)/,/^(?:\{)/,/^(?:\|\|)/,/^(?:\})/,/^(?:\+)/,/^(?:<=)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:<)/,/^(?:=)/,/^(?:boolean\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:char\b)/,/^(?:class\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:double\b)/,/^(?:else\b)/,/^(?:false\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:import\b)/,/^(?:int\b)/,/^(?:new\b)/,/^(?:return\b)/,/^(?:String\b)/,/^(?:switch\b)/,/^(?:this\b)/,/^(?:true\b)/,/^(?:void\b)/,/^(?:while\b)/,/^(?:([a-zA-Z]|_)[a-zA-Z0-9_]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}